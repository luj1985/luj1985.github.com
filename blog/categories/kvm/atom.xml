<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kvm | Lu Jun's blog]]></title>
  <link href="http://luj1985.github.com/blog/categories/kvm/atom.xml" rel="self"/>
  <link href="http://luj1985.github.com/"/>
  <updated>2012-11-10T22:56:25+08:00</updated>
  <id>http://luj1985.github.com/</id>
  <author>
    <name><![CDATA[Lu Jun]]></name>
    <email><![CDATA[luj1985@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Construct Hadoop Environment<br />Part 3 KVM Guest]]></title>
    <link href="http://luj1985.github.com/blog/2012/03/17/construct-hadoop-environment-part-3/"/>
    <updated>2012-03-17T11:25:00+08:00</updated>
    <id>http://luj1985.github.com/blog/2012/03/17/construct-hadoop-environment-part-3</id>
    <content type="html"><![CDATA[<p>Plan to construct a KVM guest as template, then clone this template to create new instance.</p>

<p>I still use Gentoo Linux as guest system, and install with minimal components.
In order to run Hadoop, guest machine only need Java environment and SSH support.</p>

<p>My host machine already has portage tree, I could passthrough entire portage partition via <a href="http://www.linux-kvm.org/page/9p_virtio">VirtFS</a></p>

<h1>Install libvirt on hypervisor machine</h1>

<p><em><a href="http://libvirt.org/">libvirt</a></em> is just a front-end of KVM, but it provide many handy tools to manage the virtual machine.
<code>
echo "app-emulation/libvirt qemu virt-network -lxc" &gt;&gt; /etc/portage/package.use
emerge app-emulation/libvirt
/etc/init.d/libvirtd start
rc-update add libvirtd default
</code></p>

<h1>Install management tools on remote client</h1>

<p>On a remote machine, here is my laptop.
Edit <em>/etc/portage/package.keywords</em>, add following line to use the latest one (0.9.1) which has enabled VirtFS configuration options.
<code>
app-emulation/virt-manager _~amd64_
</code></p>

<p>There is also a command line tools available to manage virtual machines
<code>
virsh -c qemu+ssh://root@192.168.2.101/system
</code>
virt-manager use the same manchanism to connect remote host (via SSH tunnel)</p>

<h2>Domain XML</h2>

<p>Use virt-manager to create vm, the domain xml dumped from vm is like:
```
<domain type='kvm'>
  <name>gentoo</name>
  <uuid>3d0ba141-0f7d-7039-d595-c64abb9c1ba0</uuid>
  <description>Image for construct Apache Hadoop cluster</description>
  <memory>1048576</memory>
  <currentMemory>1048576</currentMemory>
  <vcpu>1</vcpu>
  <os></p>

<pre><code>&lt;type arch='x86_64' machine='pc-1.0'&gt;hvm&lt;/type&gt;
&lt;boot dev='hd'/&gt;
&lt;bootmenu enable='no'/&gt;
</code></pre>

<p>  </os>
  <features></p>

<pre><code>&lt;acpi/&gt;
&lt;apic/&gt;
&lt;pae/&gt;
</code></pre>

<p>  </features>
  <cpu mode='custom' match='exact'></p>

<pre><code>&lt;model fallback='allow'&gt;qemu64&lt;/model&gt;
</code></pre>

<p>  </cpu>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices></p>

<pre><code>&lt;emulator&gt;/usr/bin/qemu-kvm&lt;/emulator&gt;
&lt;disk type='file' device='disk'&gt;
  &lt;driver name='qemu' type='qcow2'/&gt;
  &lt;source file='/hadoopimages/gentoo.img'/&gt;
  &lt;target dev='vda' bus='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/&gt;
&lt;/disk&gt;
&lt;disk type='file' device='cdrom'&gt;
  &lt;driver name='qemu' type='raw'/&gt;
  &lt;target dev='hdc' bus='ide'/&gt;
  &lt;readonly/&gt;
  &lt;address type='drive' controller='0' bus='1' unit='0'/&gt;
&lt;/disk&gt;
&lt;controller type='usb' index='0'&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/&gt;
&lt;/controller&gt;
&lt;controller type='ide' index='0'&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/&gt;
&lt;/controller&gt;
&lt;filesystem type='mount' accessmode='passthrough'&gt;
  &lt;driver type='path'/&gt;
  &lt;source dir='/usr/portage'/&gt;
  &lt;target dir='/hostportage'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/&gt;
&lt;/filesystem&gt;
&lt;interface type='bridge'&gt;
  &lt;mac address='00:00:00:00:00:03'/&gt;
  &lt;source bridge='br0'/&gt;
  &lt;model type='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/&gt;
&lt;/interface&gt;
&lt;serial type='pty'&gt;
  &lt;target port='0'/&gt;
&lt;/serial&gt;
&lt;console type='pty'&gt;
  &lt;target type='serial' port='0'/&gt;
&lt;/console&gt;
&lt;input type='mouse' bus='ps2'/&gt;
&lt;graphics type='vnc' port='-1' autoport='yes' keymap='en-us'/&gt;
&lt;video&gt;
  &lt;model type='cirrus' vram='9216' heads='1'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/&gt;
&lt;/video&gt;
&lt;memballoon model='virtio'&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/&gt;
&lt;/memballoon&gt;
</code></pre>

<p>  </devices>
</domain>
<code>``
* Choose generic CPU, then this VM should be able to port to other KVM based hypervisor
* Share hypervisor file system, map</code>/usr/portage<code>to</code>/hostportage`
* Enable virtio on hard disk and network card</p>

<h2>Install Gentoo Linux (guest)</h2>

<p>By default, Gentoo installation media kernel do not support <code>9p</code> which is the filesystem VirtFS used.
So here I use Ubuntu LiveCD instead.</p>

<p>Run <code>sudo -i</code> to grab a root prompt.</p>

<h3>Create partition</h3>

<p>I choose <code>VirtIO</code> as my virtual hard disk driver, the disk label is /dev/vda.</p>

<p>Run <code>fdisk /dev/vda</code> to create disk partition.
```
   Device Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048       22527       10240   83  Linux
/dev/vda2           22528      432127      204800   83  Linux
/dev/vda3          432128    40959999    20206592   83  Linux</p>

<p>```</p>

<h3>Create and mount file system</h3>

<p>```
mkfs.ext4 /dev/vda3
mkdir /mnt/gentoo
mount /dev/vda3 /mnt/gentoo</p>

<p>mkfs.ext4 dev/vda1
mkdir /mnt/gentoo/boot
mount /dev/vda1 /mnt/gentoo</p>

<p>mkswap /dev/vda2
swapon /dev/vda2</p>

<p>cd /mnt/gentoo
tar xjpf stage3-amd64-20120301.tar.bz2</p>

<p>mkdir /mnt/gentoo/usr/portage
mount -t 9p -otrans=virtio,version=9p2000.L /hostportage /mnt/gentoo/usr/portage</p>

<p>mount -o bind /proc /mnt/gentoo/proc
mount -o bndd /sys  /mnt/gentoo/sys
mount -o bind /dev  /mnt/gentoo/dev
```</p>

<h3>System configuration</h3>

<h4>DNS resolve</h4>

<p><code>
cp -L /etc/resolve.conf /mnt/gentoo/etc
</code></p>

<h4>make.conf</h4>

<p>```
CFLAGS="-O2 -pipe -fomit-frame-pointer"
CXXFLAGS="${CFLAGS}"
CHOST="x86_64-pc-linux-gnu"</p>

<p>USE="mmx sse sse2 -X -gnome -gtk -ipv6 -kde -qt -cups -alsa"
```</p>

<h3>Chroot</h3>

<p><code>
chroot /mnt/gentoo /bin/bash
env-update
source /etc/profile
</code></p>

<h3>Configure the new system</h3>

<p>Edit /etc/fstab
<code>
UUID=b65f0153-1cbf-4b3c-83f0-967781e62cea /boot ext4 noatime 1 2
UUID=6a2fd05c-058f-4fee-a8b6-8cdef2d9c4ad none  swap sw      0 0
UUID=b3a6d092-1ef2-4855-b296-af56ee653b54 /     ext4 noatime 0 1
/hostportage /usr/portage  9p  trans=virtio,version=9p2000.L 0 0
</code></p>

<p>```
passwd
eselect profile set 7</p>

<p>echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen</p>

<p>cp /usr/share/zoneinfo/UTC /etc/localtime
echo "UTC" > /etc/timezone</p>

<p>echo config_eth0=\"dhcp\" >> /etc/conf.d/net</p>

<p>emerge dhcpcd gentoo-sources</p>

<p>ln -s /etc/init.d/net.lo /etc/init.d/net.eth0
rc-update add net.eth0 default</p>

<p>rc-update add sshd default</p>

<p>echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
```</p>

<h3>Kernel configuration</h3>

<h4>Kernel must contains <em>virtio</em> drivers</h4>

<p>```
Processor type and features
  [*] Paravirtualized guest support</p>

<pre><code>[*] KVM paravirtualized clock
[*] KVM Guest support
[*] Enable paravirtualization code
</code></pre>

<p>  [<em>] Allow for memory hot-add
  [</em>]   Allow for memory hot remove
  [*] Page migration</p>

<p>Bus options
  [*] Message signaled Interrupts (MSI and MSI-X)
  <M> Support for PCI Hotplug</p>

<p>Device Drivers
  [*] Block devices</p>

<pre><code>&lt;*&gt; Virtio block driver
</code></pre>

<p>  [*] Network device support</p>

<pre><code>&lt;*&gt; Virtio network driver
</code></pre>

<p>  Character devices</p>

<pre><code>&lt;*&gt; Virtio console
</code></pre>

<p>  &lt;*> Hardware Random Number Generator Core support</p>

<pre><code>&lt;*&gt; VirtIO Random number Generator support
</code></pre>

<p>  Virtio drivers</p>

<pre><code>&lt;*&gt; PCI driver for virtio devices
&lt;*&gt; Virtio balloon driver
&lt;*&gt; Platform bus driver for memory mapped virtio devices
</code></pre>

<p>```</p>

<h4>Configure kernel for <em>virtfs</em> support</h4>

<p>```
[*] Networking support
  <M> Plan 9 Resource Sharing Support</p>

<pre><code>&lt;M&gt; 9p Virtio Transport
</code></pre>

<p>File systems
  [*] Network File Systems</p>

<pre><code>&lt;M&gt; Plan 9 Resource Sharing Support
  [*] 9P POSIX Access Control
</code></pre>

<p>```</p>

<h3>Install Grub</h3>

<p><code>
grep -v rootfs /proc/mounts &gt; /etc/mtab
emerge -av grub-static
</code>
Because Grub Legacy cannot recognize VirtIO disk automatically, need to edit <code>/boot/grub/device.map</code> first
<code>
(hd0)   /dev/vda
</code>
Then install Grub to MBR
<code>
grub-install --no-floppy /dev/vda
</code>
Edit /boot/grub/grub.conf
```
default 0
timeout 1</p>

<p>title Gentoo KVM guest 3.2.1-r2
root (hd0,0)
kernel /boot/vmlinuz-3.2.1-gentoo-r2 root=/dev/vda3
```</p>

<h3>Install JDK</h3>

<p>Hadoop require Java envrionment, so install jdk
<code>
emerge -av jdk
</code>
find <em>JAVA_HOME</em> via command
<code>
java-config --jdk-home
</code></p>

<h2>Compact the KVM guest image</h2>

<p>KVM guest disk format is <code>qcow2</code>, after system installation the disk size has grew very big, but
in fact most of them are empty (File created, then deleted)</p>

<p>Firstly, shutdown the KVM guest machine, then run following command to compact the image size
<code>
qemu convert -c -f qcow2 -O qcow2 hadoop.img hadoop.compact.img
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Construct Hadoop Environment<br />Part 2 KVM Host]]></title>
    <link href="http://luj1985.github.com/blog/2012/03/14/construct-hadoop-environment-part-2/"/>
    <updated>2012-03-14T01:03:00+08:00</updated>
    <id>http://luj1985.github.com/blog/2012/03/14/construct-hadoop-environment-part-2</id>
    <content type="html"><![CDATA[<p>KVM has two components</p>

<ul>
<li>A device driver for managing the virtulization hardware; this driver exposes its capabilities via a character device <em>/dev/kvm</em></li>
<li>A user-space component for emulating PC hardware; this is a lightly modified <em>QEMU</em> process.</li>
</ul>


<p>The modified <em>QEMU</em> process <em>mmap()</em> the guest's physical memory and calls the kernel mode driver to execute in guest mode.</p>

<p>The I/O model is directly derived from <em>QEMU</em>'s, with support for copy-on-write disk images and other <em>QEMU</em> features.
But use <em>QEMU</em> to do full virtualization will reduce the performance, so KVM introduce VirtIO to perform paravirtualization,
notice guest machine that it was running in a virtual environment.</p>

<p><a href="http://www.ibm.com/developerworks/linux/library/l-virtio/">Here</a> is a very good document described the VirtIO.</p>

<h1>KVM based hypervisor configuration</h1>

<h2>Hardware</h2>

<p>CPU must have virtualization instruction set support
<code>
grep '(vmx|svm)' /proc/cpuinfo
</code>
* svm = secure virtual machine (AMD)
* vmx = virtual machine extensions (Intel)</p>

<p>My CPU is AMD based, the instruction set <code>svm</code> was found.</p>

<h2>KVM host(hypervisor) configuration</h2>

<p>Tune kernel to support KVM, and enable network protocol to support bridge.</p>

<h3>Kernel configuration (with paravirtualization support)</h3>

<p><a href="http://www.linux-kvm.org/page/Tuning_Kernel#Kernel_for_host">Here</a> is a official document about tuning the kernel of KVM host
```
General setup
  [*] Control Group support</p>

<p>Processor type and features
  [<em>] High Resolution Timer Support
  [</em>] Allow for memory compaction
  [<em>] Page migration
  [</em>] Enable KSM for page merging
  [*] transparent Hugepage Support</p>

<p>Device Drivers
  Character devices</p>

<pre><code>[*] HPET - High Precision Event Timer
</code></pre>

<p>[*] Virtualization
  <M> Kernel-based Virtual Machine (KVM) support
  &lt; >   KVM for Intel processors support
  <M>   KVM for AMD processors support
  <M> Host kernel accelerator for virtio net
```</p>

<h3>Network bridge support</h3>

<p>I want to connect to KVM guest remotely, need enable bridge networking.</p>

<p>To enable network bridge need following kernel options.
```
[*] Networking support
  Networking options</p>

<pre><code>&lt;M&gt; 802.1d Ethernet Bridging
&lt;M&gt; 802.1Q VLAN Support
</code></pre>

<p>Device Drivers
[<em>] Network device support
  [</em>] Network core driver support</p>

<pre><code>&lt;M&gt; Universal TUN/TAP device driver support
</code></pre>

<p>```</p>

<h3>/etc/conf.d/modules</h3>

<p>Create config file to load kernel module
<code>
modules="kvm-amd bridge 8021q tun vhost-net"
</code></p>

<h2>User space packages</h2>

<p>emerge following user space tools
<code>
app-emulation/qemu-kvm qemu-ifup xattr tls
net-misc/bridge-utils
</code></p>

<h1>Bridge network configuration</h1>

<p>Direct bridging (guests use an IP address on the same subnet as the host)
<blockquote><p>The most transparent option to allow your guests access to the internet is the "virtual hub". In this scheme, the bridge connects eth0 and your tuntap interfaces together, routing packets as if it were a real "old fashioned" hub (not a switch). The key to this approach is to make sure you have unique mac addresses on both the host's tuntap interface as well as the guest.</p><footer><strong>KVM</strong> <cite><a href='http://en.gentoo-wiki.com/wiki/KVM'>en.gentoo-wiki.com/wiki/KVM/&hellip;</a></cite></footer></blockquote></p>

<p>I use QEMU Tap networking backend, <a href="http://wiki.qemu.org/Documentation/Networking#Tap">it require to invoke QEMU as root</a></p>

<h2>/etc/init.d</h2>

<p>Create network device
<code>
ln -s /etc/init.d/net.lo /etc/init.d/net.br0
rc-update add net.br0 default
</code></p>

<h2>Enable KSM</h2>

<p>KSM was not enabled by default.</p>

<p>Create file <em>/etc/local.d/ksm.start</em>
<code>
echo 1 &gt; /sys/kernel/mm/ksm/run
</code>
Grant executable permission
<code>
chmod a+x /etc/local.d/ksm.start
</code>
In Gentoo, all script in directory <em>/etc/local.d</em> will be executed by <em>/etc/init.d/local</em> when system starting up</p>

<h2>/etc/conf.d/net</h2>

<p>Network startup options
```
bridge_br0="eth0"
config_eth0="null"</p>

<p>brctl_br0="setfd 0 sethello 1 stp off"
config_br0="dhcp"</p>

<p>depend_br0() {</p>

<pre><code>need net.eth0
</code></pre>

<p>}
```</p>

<h2>Create script to manage network device</h2>

<p>I enabled <code>qemu-ifup</code> USE flag of app-emulation/qemu-kvm package.
But the script were under <em>/etc/qemu/</em> which is not the default location <em>qemu-kvm</em> use.</p>

<p>And the program path in script <em>/etc/qemu/qemu-ifup</em> is hard coded and is not suite for Gentoo system.
So I created the following two scripts instead, and grant executable permission.</p>

<h3>/etc/qemu-ifup</h3>

<p>```</p>

<h1>!/bin/sh</h1>

<p>switch=$(/sbin/ip route list | awk '/<sup>default</sup> / { print $5 }')
/sbin/ifconfig $1 0.0.0.0 up
/sbin/brctl addif ${switch} $1
```</p>

<h3>/etc/qemu-ifdown</h3>

<p>```</p>

<h1>!/bin/sh</h1>

<p>switch=$(/sbin/ip route list | awk '/<sup>default</sup> / { print $5 }')
/sbin/ifconfig $1 0.0.0.0 down
/sbin/brctl delif ${switch} $1
```</p>

<h2>Make configuration take effect</h2>

<p><code>
modprobe kvm-amd bridge 8021q tun vhost-net
/etc/init.d/net.eth0 restart
/etc/init.d/net.br0 start
</code>
Or simply reboot the system.</p>

<h1>Test KVM guest machine</h1>

<p>Login hypervisor as root and run following command to create guest machine.
```
qemu-img create -f qcow2 -o preallocation=metadata gentoo.img 10G
qemu-kvm -hda gentoo.img -cdrom install-amd64-minimal-20120223.iso \</p>

<pre><code>     -net nic,mac=00:00:00:00:00:01,vlan=0 -net tap,vlan=0 -boot d -vnc :0
</code></pre>

<p><code>
Use option `-vnc :0` to open a VNC port, then I could use `vncviewer` to connect it remotely.
IP address of my KVM host server is 192.168.2.101, then use following command to connect VNC
</code>
vncviewer 192.168.2.101:0
```</p>

<p>After VNC connected, active network card in guest machine, start SSH server.
<code>
ifconfig eth0 up
dhcpcd eth0
passwd
/etc/init.d/sshd start
</code></p>

<p>The guest machine gains IP address 192.168.2.103. Then it should be able to access from outside world.
<code>
ssh root@192.168.2.103
</code></p>
]]></content>
  </entry>
  
</feed>
